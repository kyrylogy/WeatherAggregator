@page "/"
@rendermode InteractiveServer
@using weather_api_blazor.Components.Models
@using weather_api_blazor.Components.Services
@attribute [StreamRendering]
@inject OpenWeatherService OpenWeather
@inject GeoSphereService GeoSphere

<PageTitle>Weather</PageTitle>

<div class="center-content weather-text">
    <h1 class="mb-4">MultiWeather</h1>

    <div class="d-flex gap-3 justify-content-center mb-4">
        <button class="btn btn-primary" @onclick="GetOpenWeather">Get OpenWeatherMap</button>
        <button class="btn btn-secondary" @onclick="GetGeoSphere">Get GeoSphere Austria</button>
    </div>

    @if (weatherResults == null || !weatherResults.Any())
    {
        <p class="no-data-message"><em>No data yet. Click a button above to load weather data.</em></p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-dark table-bordered table-hover text-white weather-table">

            <thead>
                    <tr>
                        <th>Source</th>
                        <th>City</th>
                        <th>Temperature (°C)</th>
                        <th>Condition</th>
                        <th> </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var result in weatherResults)
                    {
                        <tr>
                            <td>@result.Source</td>
                            <td>@result.City</td>
                            <td>@($"{result.TemperatureCelsius:F1}")</td> @* formats as 13.5, not 13,5 *@
                            <td>@result.Condition</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<WeatherResult> weatherResults = new();

    private async Task GetOpenWeather()
    {
        var result = await OpenWeather.GetWeatherAsync("Vienna");
        weatherResults.Clear();
        weatherResults.Add(result);
    }

    private async Task GetGeoSphere()
    {
        var result = await GeoSphere.GetWeatherAsync("Vienna");
        weatherResults.Clear();
        weatherResults.Add(result);
    }
}
