@page "/search"
@rendermode InteractiveServer
@using weather_api_blazor.Components.Models
@using weather_api_blazor.Components.Services
@inject GeoSphereService GeoSphere

<PageTitle>Station Search</PageTitle>

<h3>Search GeoSphere Stations</h3>

<!-- Wrap in a <form> so Enter submits -->
<form class="mb-3" @onsubmit="HandleSubmit">
    <div class="input-group">
        <input
            class="form-control"
            placeholder="Type station or city name..."
            @bind="query"
            @bind:event="oninput"
            @onkeypress="HandleKeyPress" />
        <button class="btn btn-outline-secondary" type="submit">
            🔍 Search
        </button>
    </div>
</form>

@if (suggestions?.Any() ?? false)
{
    <ul class="list-group mb-3">
        @foreach (var s in suggestions)
        {
            <li
                class="list-group-item list-group-item-action"
                @onclick="() => SelectStation(s)">
                <strong>@s.Name</strong>
                <span class="text-muted">(@s.State)</span>
            </li>
        }
    </ul>
}
else if (!string.IsNullOrWhiteSpace(query))
{
    <p class="text-muted"><em>No matches found.</em></p>
}

@if (selectedStation != null)
{
    <p>
        Selected: <strong>@selectedStation.Name</strong>
        (<em>@selectedStation.Id</em>) —
        Coordinates: @selectedStation.Latitude, @selectedStation.Longitude
    </p>
    <button class="btn btn-primary" @onclick="LoadWeather">
        Get Current Temp
    </button>
}

@if (stationWeather != null)
{
    <div class="mt-3">
        <h5>Weather at @selectedStation.Name</h5>
        <p>Temperature: <strong>@($"{stationWeather.TemperatureCelsius:F1} °C")</strong></p>
        <p>Condition: <strong>@stationWeather.Condition</strong></p>
    </div>
}

@code {
    private string query = "";
    private List<StationInfo>? suggestions;
    private StationInfo? selectedStation;
    private WeatherResult? stationWeather;

    // Called when the form is submitted (Enter key or Search button)
    private async Task HandleSubmit()
    {
        await SearchAsync();
    }

    // Optional: catch Enter key on the input
    private async Task HandleKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SearchAsync();
        }
    }

    private async Task SearchAsync()
    {
        if (string.IsNullOrWhiteSpace(query) || query.Length < 2)
        {
            suggestions = null;
            return;
        }

        suggestions = (await GeoSphere.SearchStationsAsync(query))
            .ToList();
    }

    private void SelectStation(StationInfo s)
    {
        selectedStation = s;
        suggestions = null;
        stationWeather = null;
    }

    private async Task LoadWeather()
    {
        if (selectedStation is null) return;
        stationWeather = await GeoSphere.GetWeatherAsync(selectedStation.Id);
    }
}
